"""
Django settings for cluberpbackend project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os
from decouple import Csv, config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'phonenumber_field',
    'django_countries',
    'django_filters',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'rest_framework_swagger',
    'corsheaders',
    'users',
    'items',
    'events',
    'coupons',
    'carts',
    'orders',
    'payments'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cluberpbackend.middleware.AuthKeyRequiredMiddleware'
]

ROOT_URLCONF = 'cluberpbackend.urls'
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'users-agent',
    'x-csrftoken',
    'x-requested-with',
)
# CORS_ORIGIN_WHITELIST = (
#   'localhost:8000',
#  '127.0.0.1:4200'
# )
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cluberpbackend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.mysql',
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}

# User Model settings
AUTH_USER_MODEL = 'users.User'

# first define the auth_user_model and then authentication_backends after

AUTHENTICATION_BACKENDS = [
    'users.backends.UsernameOrPhoneAuthentication',
    'django.contrib.auth.backends.ModelBackend',

]

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# token expiration total seconds
TOKEN_EXPIRED_AFTER_SECONDS = 24 * 60 * 60  # total 24 hours is time for token to expire

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.authentication.ExpiringTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',),
    # 'DEFAULT_PAGINATION_CLASS': ('cluberpbackend.pagination.CustomPagination',)

}
# REST_AUTH_SERIALIZERS = {
#     'LOGIN_SERIALIZER': 'users.serializers.LoginSerializer',
#     'TOKEN_SERIALIZER': 'users.serializers.TokenSerializer',
# }

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
SITE_ID = 1

# Codes for success and failure
ERROR_CODE = 0
SUCCESS_CODE = 1

EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool)

LOGIN_EXEMPT_URLS = (
    r'^auth/login/',
    r'^events/configurations/key-value-pairs/',
    r'^events/events/',
    r'^events/(?P<event_uuid>[0-9a-f-]+)/',
    r'^events/(?P<event_uuid>[0-9a-f-]+)/attendees/',
    r'^events/(?P<event_uuid>[0-9a-f-]+)/event-items/',
    r'^coupons/coupons/validate-coupon/',
    r'^coupons/coupons/remove-coupon-from-cart/',

    # r'^events/(?P<event_uuid>[0-9a-f-]+)/event-items/get-all-days-registration-items/',

    # r'^register/',
    # r'^register/verify-email/',
    # r'^account-confirm-email/',
    # r'^reset-password/',
    # r'^validate-reset-password/[-\w]+/[-\w]+/',
    r'^api-list/',

)

# VENDOR WISE CONFIGURATION

FRONTEND_URL = config('FRONTEND_URL', 'http://localhost:4200')
# if set True, email field is made required in front-end form and backend validation
# for staff registration by staff admin
STAFF_EMAIL_IS_REQUIRED = config('STAFF_EMAIL_IS_REQUIRED', cast=bool)

# if set True, phone field is made required in front-end  form and backend validation
# for staff registration by staff admin
STAFF_PHONE_IS_REQUIRED = config('STAFF_PHONE_IS_REQUIRED', cast=bool)

# if set True, email field is made required in front-end  form and backend validation
# for self registration by users
USER_EMAIL_IS_REQUIRED = config('USER_EMAIL_IS_REQUIRED', cast=bool)

# if set True, phone field is made required in front-end  form  and backend validation
# for self registration by users
USER_PHONE_IS_REQUIRED = config('USER_PHONE_IS_REQUIRED', cast=bool)

# attendee settings are for the event attendee
ATTENDEE_EMAIL_IS_REQUIRED = config('ATTENDEE_EMAIL_IS_REQUIRED', cast=bool)
ATTENDEE_PHONE_IS_REQUIRED = config('ATTENDEE_PHONE_IS_REQUIRED', cast=bool)

# if set True,users can not login unless  phone is verified
PHONE_VERIFICATION_MUST_FOR_LOGIN = config('PHONE_VERIFICATION_MUST_FOR_LOGIN', cast=bool)

# if set True, users can not login unless email is verified
EMAIL_VERIFICATION_MUST_FOR_LOGIN = config('EMAIL_VERIFICATION_MUST_FOR_LOGIN', cast=bool)

PHONE_AND_EMAIL_BOTH_VERIFICATION_MUST_FOR_LOGIN = config('PHONE_AND_EMAIL_BOTH_VERIFICATION_MUST_FOR_LOGIN', cast=bool)

# all users settings
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_ADAPTER = 'users.adapters.MyAccountAdapter'

REST_AUTH_REGISTER_SERIALIZERS = {'REGISTER_SERIALIZER': 'users.serializers.UserRegisterSerializer', }

#  stripe api key
STRIPE_API_kEY = config('STRIPE_API_kEY')
# this is temporary fix for pycharm error, shall be removed later
# PYDEVD_USE_FRAME_EVAL = False

# celery and redis related configurations
CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379')
CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# default password
DEFAULT_PASSWORD = config('DEFAULT_PASSWORD', 'event123!@#456')
